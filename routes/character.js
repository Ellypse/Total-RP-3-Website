// Generated by CoffeeScript 1.10.0
(function() {
  var Q, debug, isAuthenticated, request, router;

  debug = require('debug')('character');

  router = require('express').Router();

  request = require('request-promise');

  Q = require('q');

  debug('Importing isAuthenticated method from passport');

  isAuthenticated = appReq("/controllers/authentication/passport-auth").isAuthenticated;

  router.get('/ ', isAuthenticated, function(req, res) {
    var availableRegions, charactersUri, deferred, i, len, region, the_promises;
    debug('GET /character/');
    availableRegions = ['eu', 'us', 'kr', 'tw'];
    debug('Current user Battle.net token', req.user.battlenet.accessToken);
    charactersUri = ".api.battle.net/wow/user/characters?access_token=" + req.user.battlenet.accessToken;
    debug('API URL:', charactersUri);
    the_promises = [];
    debug('Looping through regions');
    for (i = 0, len = availableRegions.length; i < len; i++) {
      region = availableRegions[i];
      deferred = Q.defer();
      debug('Sending request to Blizzard’s API for region', region);
      debug('Using URL:', "https://" + region + charactersUri);
      request("https://" + region + charactersUri).then(function(data) {
        var characters;
        debug('Received response from Blizzard’s API for region', region, data);
        debug('Parsing data and fetching characters for region', region);
        characters = JSON.parse(data).characters;
        debug('Characters found for region', region, characters);
        debug('Resolving promise for region', region);
        return deferred.resolve;
      }, function(error) {
        debug('Error response received from Blizzard’s API for region', region, error);
        debug('Rejecting promise for region', region);
        return deferred.reject(error);
      });
      debug('Adding promise to the list of primises for region', region);
      the_promises.push(deferred.promise);
    }
    debug('Preparing callback for when all the promises are resolved');
    return Q.all(the_promises).then(function(data) {
      var merged;
      debug('All the promises are resolved');
      merged = [];
      debug('Merging data', data);
      merged = merged.concat.apply(merged, data);
      debug('Data merged', merged);
      debug('Outputing merged data');
      return res.json({
        characters: merged
      });
    });
  });

  module.exports = router;

}).call(this);

//# sourceMappingURL=character.js.map
